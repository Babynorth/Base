<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- Connection Pooling Info -->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
        <property name="minPoolSize" value="${jdbc.minPoolSize}" />
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
        <property name="maxStatements" value="${jdbc.maxStatements}" />
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
        <property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}" />
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
        <property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}" />
        <property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}" />
    </bean>


    <!-- orcl hibernate settings -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
          p:dataSource-ref="dataSource">
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.connection.isolation">${hibernate.connection.isolation}</prop>
                <prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
                <prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
            </props>
        </property>
       <!-- <property name="packagesToScan">
            <list>
                <value>${bis.entity.package}</value>
            </list>
        </property>-->
    </bean>

    <!-- 业务类中的@Transaction注解进行驱动 即支持事务注解-->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 配置事务管理器 指定其作用的sessionFactory把事务交给Spring去处理 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 采用XML配置声明式事务-->
    <aop:config>
        <!-- 设置pointCut表示哪些方法要加入事务处理 -->
        <aop:pointcut id="allMethods" expression="execution(* com.babynorth..service..*.*(..))" />
        <!-- 通过advisor来确定具体要加入事务控制的方法 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
            <tx:method name="*" read-only="true" />
            <!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
            <tx:method name="save*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <!--验证码start-->
    <bean id="jcaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
        <constructor-arg index="0" type="com.octo.captcha.service.captchastore.CaptchaStore">
            <ref bean="sessionCaptchaStore"></ref>
        </constructor-arg>
        <constructor-arg index="1" ref="imageEngine"/>
        <!---->
        <constructor-arg type="int" index="2" value="180"/>
        <!---->
        <constructor-arg type="int" index="3" value="100000"/>
        <!--最大并发数-->
        <constructor-arg type="int" index="4" value="75000"/>
    </bean>

    <bean id="imageEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
        <constructor-arg index="0">
            <list>
                <ref bean="captchaFactory"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="captchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory">
        <constructor-arg>
            <ref bean="wordgen"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="wordtoimage"/>
        </constructor-arg>
    </bean>

    <bean id="wordgen" class= "com.octo.captcha.component.word.wordgenerator.RandomWordGenerator">
        <!--可选字符-->
        <constructor-arg>
            <value>123456789QWERTYUIOPASDFGHJKLZXCVBNM</value>
        </constructor-arg>
    </bean>

    <bean id="wordtoimage" class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
        <constructor-arg index="0">
            <ref bean="fontGenRandom"/>
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="backGenUni"/>
        </constructor-arg>
        <constructor-arg index="2">
            <ref bean="decoratedPaster"/>
        </constructor-arg>
    </bean>

    <bean id="fontGenRandom" class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
        <!--最小字体-->
        <constructor-arg index="0">
            <value>20</value>
        </constructor-arg>
        <!--最大字体-->
        <constructor-arg index="1">
            <value>25</value>
        </constructor-arg>
        <constructor-arg >
            <list >
                <ref bean="fontArial"></ref>
            </list>
        </constructor-arg>
    </bean>

    <bean id="fontArial" class="java.awt.Font">
        <constructor-arg value="Arial" index="0"></constructor-arg>
        <constructor-arg value="0" index="1"></constructor-arg>
        <constructor-arg value="10" index="2"></constructor-arg>
    </bean>

    <bean id="backGenUni" class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator">
        <!--背景宽度-->
        <constructor-arg index="0">
            <value>110</value>
        </constructor-arg>
        <!--背景高度-->
        <constructor-arg index="1">
            <value>50</value>
        </constructor-arg>
    </bean>

    <bean id="decoratedPaster" class="com.octo.captcha.component.image.textpaster.SimpleTextPaster">
        <!--最大字符长度-->
        <constructor-arg type="java.lang.Integer" index="0">
            <value>4</value>
        </constructor-arg>
        <!--最小字符长度-->
        <constructor-arg type="java.lang.Integer" index="1">
            <value>4</value>
        </constructor-arg>
        <!--验证码颜色-->
        <constructor-arg type="java.awt.Color"  index="2">
            <ref bean="colorGen"/>
        </constructor-arg>
    </bean>

    <bean id="colorGen" class="java.awt.Color">
        <constructor-arg type="int" index="0">
            <value>51</value>
        </constructor-arg>
        <constructor-arg type="int" index="1">
            <value>49</value>
        </constructor-arg>
        <constructor-arg type="int" index="2">
            <value>53</value>
        </constructor-arg>
    </bean>

    <bean id="sessionCaptchaStore" class="com.babynorth.base.action.captcha.SessionCaptchaStore"></bean>

    <!--验证码end-->

    <bean id="helloWorld" class="com.babynorth.base.action.captcha.HelloWorld">
        <property name="name" value="Spring1"></property>
    </bean>


</beans>